@startuml MainSystem

package "Component"{
    class CloseAttackComponent{
        
    }

    class MovementComponent{
        + Move() : void
    }
}

class GameManager {
    - PlayerManager : PlayerManager
    - EnemyManager : EnemyManager
    - LevelManager : LevelManager
    - GameState : GameState
    + ChangeState(GameState newState) : void
    + InitializeGameplayStateCoroutine() : IEnumerator
}

class PlayerManager {
    - _playerPrefab : GameObject
    - _player : Player
    + Init() : void
    + LogicUpdate() : void
    + PhysicsUpdate() : void
    + UpdatePlayerPosition(Vector3 newPosition) : void
    + GetPlayerInstance() : GameObject
}

class EnemyManager {
    - _waveConfigs : List<WaveConfig>
    - _currentWaveEnemies : List<Enemy>
    - _enemiesToRemove : List<Enemy>
    - _currentWaveIndex : int
    + Init() : void
    + SetWaveConfig(List<WaveConfig>) : void
    + StartWave() : void
    + LogicUpdate() : void
    + RegisterWaveEnemy(Enemy enemy) : void
    + HandleEnemyDeath(Enemy enemy) : void
}

class LevelManager {
    - _gameLevelDatabase : LevelDataBase
    - _currentStageIndex : int
    - _currentLevelData : LevelData
    - _maxLevelNum : int
    - _aStar : AStar
    - _map : int[,]
    + Init() : void
    + InitializeLevel() : void
    + SetParameters(Player player, EnemyManager enemyManager) : void
    + GetPlayerSpawnPos() : Vector3
    + SetWaveConfigToEnemyManager(EnemyManager enemyManager) : void
    + UpdateLevel() : void
    + ResetLevel() : void
}

class AstarNode {
        - BlockType : BlockType
        - Pos : Vector2Int
        - parent : AstarNode
        - G : float
        - H : float
        - F : float
        + AstarNode(int x, int y, BlockType blockType)
    }

class AStar {
    - width : int
    - height : int
    - nodeArray : AstarNode[,]
    - _openList : List<AstarNode>
    - _closeList : List<AstarNode>
    + InitMap(int[,] map) : void
    + FindPath(Vector2Int start, Vector2Int goal) : List<AstarNode>
    + IsMapExternal(int x, int y) : bool
    + GetNeighbors(AstarNode node) : List<AstarNode>
    
    enum BlockType { Walk, Stop }
    
    
}

class PoolManager {
    - enemyPools : UnityObjectPool[]
    - bulletPools : UnityObjectPool[]
    - dictionary : Dictionary<GameObject, UnityObjectPool>
    + Release(GameObject prefab) : GameObject
    + Release(GameObject prefab, Vector3 position) : GameObject
    + Release(GameObject prefab, Vector3 position, Quaternion rotation) : GameObject
    + Release(GameObject prefab, Vector3 position, Quaternion rotation, Vector3 localScale) : GameObject
    + Initialize(UnityObjectPool[] pools) : void
}

class UnityObjectPool {
    - prefab : GameObject
    - size : int
    - _availableQueue : Queue<GameObject>
    - _parent : Transform
    + Prefab : GameObject
    + Size : int
    + RuntimeSize : int
    + Initialize(Transform parent) : void
    + preparedObject() : GameObject
    + preparedObject(Vector3 position) : GameObject
    + preparedObject(Vector3 position, Quaternion rotation) : GameObject
    + preparedObject(Vector3 position, Quaternion rotation, Vector3 localScale) : GameObject
}

class ObjectPool<T> {
    - _availableInstances : Queue<T>
    - Size : int
    - RuntimeSize : int
    - _maxSize : int
    + GetInstance() : T
    + ReturnInstance(T instance) : void
}

interface IPoolable {
    + IsActive : bool
    + Reset() : void
}

class StateMachine {
    - currentState : IState
    - CurrentState : Enum
    - _stateTable : Dictionary<Enum, IState>
    + Initialize(Enum startState) : void
    + ChangeState(Enum newState) : void
    + LogicUpdate() : void
    + PhysicsUpdate() : void
    + AnimationEventCalled() : void
    + AnimationEndCalled() : void
    + RegisterState(Enum stateEnum, IState state) : void
    + CheckState(IState state) : bool
}

class IState {
    + Enter() : void
    + Exit() : void
    + LogicUpdate() : void
    + PhysicsUpdate() : void
    + AnimationEventCalled() : void
    + AnimationEndCalled() : void
}

class PlayerStateMachine extends StateMachine {
    + PlayerStateMachine(Player player) : void
}

class EnemyStateMachine extends StateMachine {
    + EnemyStateMachine(Enemy enemy) : void
}

 struct Stats{
    + HP : float
    + MP : float
    + Def : float
    + Atk : float
    + Speed : int
 }


class EntityBase(ScriptableObject){
    - stats : Stats
    - Sprite : sprite
}

class PlayerStats{
    - stats : EntityBase

    - CurrentPower : int
    - CurrentHP : float
    - CurrentMP : float
    
    + SetBasePower() : void
    + SetBaseHP() : void
    + SetBaseMP() : void
}

class PlayerInput{
    + Axis : Vector2
    + DashInput : bool
    + AttackInput : bool
}

class Player {
    + InitValue() : void
    + Initialize() : void
    + LogicUpdate() : void
    + PhysicsUpdate() : void
    + RotationWithMouse(Vector3 targetDirection, float rotationSpeed) : void
}

Player *-- PlayerInput : has
Player o-- CloseAttackComponent : has
Player *-- PlayerStateMachine : has
Player o-- PlayerManager 

class Enemy {
    + TargetFound : bool
    + InAttackRange : bool
    + IsTakenDamaged : bool
    + InitValue() : void
    + LogicUpdate() : void
    + TakeDamage(float amount) : void
    + SetPlayerTransform(Transform player) : void
    + FindPath() : void
}

class FireDemon{

}

FireDemon *-- CloseAttackComponent : has


GameManager --> PlayerManager
GameManager --> EnemyManager
GameManager --> LevelManager

EnemyManager --> Enemy
LevelManager --> AStar
AStar --> AstarNode

StateMachine -up-> IState

EnemyStateMachine --> Enemy

PoolManager --> UnityObjectPool
UnityObjectPool --> GameObject
ObjectPool --> IPoolable


Enemy --> FireDemon
@enduml
