@startuml TopDown
' キャラクターとそのステートマシン
class Entity {
    #int Health
    #float Speed
}

class Player {
}

class Enemy {
}

class PlayerInput{

}

class MoveComponent{    
    -Transform entityTransform
    -Rigidbody entityRigidbody
    +void MoveComponent(Transform,Rigidbody)

    +void Move(Vector,Speed)
}

interface IDamaged{
    +void TakeDamage(float damage);
}

Entity *-up- MoveComponent
Entity <|.up. IDamaged

Entity <|-- Player
Entity <|-- Enemy

Player *-down- PlayerInput

interface IState {
    +void Enter()
    +void Execute()
    +void Exit()
}

class BaseState {
    +void Enter()
    +void Execute()
    +void Exit()
}


' 武器ベース
class WeaponBase{

}
' 剣
class SwordWeapon{
    
}

class StateMachine{

}

BaseState .up.|> IState

class PlayerState {
}

enum PlayerStateEnum{
    Idle
    Move
    Attack
    Damaged
    Die
}

class EnemyState {
}

enum EnemyStateEnum{
    Idle
    Move
    Attack
    Damaged
    Die
}

PlayerState -up-|> BaseState
EnemyState -up-|> BaseState

class PlayerStateMachine {
    +void ChangeState(IState newState)
}

class EnemyStateMachine {
    +void ChangeState(IState newState)
}

PlayerStateMachine -right- Player : controls >
EnemyStateMachine -- Enemy : controls >

Player "1" *-- "1" PlayerStateMachine : stateMachine
Enemy "1" *-- "1" EnemyStateMachine : stateMachine

PlayerStateMachine *-- IState : currentState
EnemyStateMachine *-- IState : currentState

' マネージャー
class AudioManager {
    +void PlaySound(string clipName)
}

class EffectManager {
    +void TriggerEffect(string effectName)
}

class PoolManager {
    +GameObject GetObject(string type)
    +void ReturnObject(GameObject obj)
}

class TimeManager {
    +void StartTimer()
    +void StopTimer()
}

class GameManager {
    {static} +GameManager Instance
    +GameStateEnum currentState
    +void ChangeState(GameStateEnum newState)
}

enum GameStateEnum{
    Title
    Game
    Pause
    End
}

@enduml